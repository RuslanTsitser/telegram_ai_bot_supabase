import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(
  Deno.env.get("SUPABASE_URL") ?? "",
  Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? "",
);

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface UserReminder {
  id: string;
  telegram_user_id: number;
  reminder_type: "water" | "meal";
  is_enabled: boolean;
  reminder_time?: string;
  interval_minutes?: number;
  last_sent_at?: string;
  timezone: string;
}

interface User {
  telegram_user_id: number;
  first_name?: string;
  last_name?: string;
  language: string;
}

// –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
const WATER_MESSAGES = {
  ru: [
    "üíß –í—Ä–µ–º—è –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã! –í–∞—à –æ—Ä–≥–∞–Ω–∏–∑–º –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏.",
    "üö∞ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–∏—Ç—å –≤–æ–¥—É! –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.",
    "üí¶ –°—Ç–∞–∫–∞–Ω –≤–æ–¥—ã —Å–µ–π—á–∞—Å - –∑–∞–ª–æ–≥ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è!",
    "üåä –ü–æ—Ä–∞ –≤—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã. –ü–µ–π—Ç–µ –≤–æ–¥—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.",
    "üíß –í–æ–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–º –æ—Ç —Ç–æ–∫—Å–∏–Ω–æ–≤. –í—Ä–µ–º—è –ø–æ–ø–∏—Ç—å!",
    "üö∞ –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è –≤–∞–∂–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–∑–≥–∞. –í—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã!",
    "üí¶ –í–æ–¥–∞ —É–ª—É—á—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–∏—Ç—å!",
    "üåä –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–∏—Ç—å–µ –≤–æ–¥—ã –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞–ø–ø–µ—Ç–∏—Ç. –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã",
  ],
  en: [
    "üíß Time to drink water! Your body needs hydration.",
    "üö∞ Don't forget to drink water! It's important for your health.",
    "üí¶ A glass of water now is the key to feeling good!",
    "üåä Drink water regularly to maintain water balance. It's time to drink a glass of water",
    "üíß Water helps cleanse the body of toxins. Time to drink!",
    "üö∞ Hydration is important for brain function. Drink some water!",
    "üí¶ Water improves skin condition. Don't forget to drink!",
    "üåä Regular water drinking helps control appetite. It's time to drink a glass of water",
  ],
};

const MEAL_MESSAGES = {
  ru: [
    "üçΩ –í—Ä–µ–º—è –ø–æ–µ—Å—Ç—å! –í–∞—à–µ–º—É –æ—Ä–≥–∞–Ω–∏–∑–º—É –Ω—É–∂–Ω–∞ —ç–Ω–µ—Ä–≥–∏—è.",
    "ü•ó –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø–æ–µ—Å—Ç—å. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏! –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞.",
    "üçé –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ - –∑–∞–ª–æ–≥ –∑–¥–æ—Ä–æ–≤—å—è. –í—Ä–µ–º—è –ø–æ–µ—Å—Ç—å!",
    "ü•ò –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞. –í—ã —É–∂–µ –ø–æ–µ–ª–∏?",
    "üçΩ –ï–¥–∞ –¥–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è. –í—Ä–µ–º—è –ø–æ–µ—Å—Ç—å!",
    "ü•ó –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–æ–µ—Å—Ç—å!",
    "üçé –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –ø–æ–º–æ–≥–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å. –í–∞–º –ø–æ—Ä–∞ –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å",
    "ü•ò –ï–¥–∞ - —ç—Ç–æ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–ª–∞. –í—Ä–µ–º—è –∑–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è!",
  ],
  en: [
    "üçΩÔ∏è Your body needs energy. It's time to eat!",
    "ü•ó It's time to eat. Don't skip meals! It's important for metabolism.",
    "üçé Balanced nutrition is the key to health. It's time to eat!",
    "ü•ò Regular meals help maintain stable blood sugar levels. You already ate?",
    "üçΩ Food gives energy for a productive day. It's time to eat!",
    "ü•ó Proper nutrition improves concentration. Don't forget to eat!",
    "üçé Regular meals help control weight. You're ready for a snack",
    "ü•ò Food is fuel for your body. It's time to refuel!",
  ],
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function getRandomMessage(type: "water" | "meal", language: string): string {
  const messages = type === "water" ? WATER_MESSAGES : MEAL_MESSAGES;
  const langMessages = messages[language as keyof typeof messages] ||
    messages.ru;
  return langMessages[Math.floor(Math.random() * langMessages.length)];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(
  telegramUserId: number,
  message: string,
): Promise<boolean> {
  const botToken = Deno.env.get("PRODUCTION_BOT_TOKEN");
  if (!botToken) {
    console.error("PRODUCTION_BOT_TOKEN not found");
    return false;
  }

  try {
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: telegramUserId,
          text: message,
          parse_mode: "HTML",
        }),
      },
    );

    if (!response.ok) {
      const errorData = await response.json();
      console.error(`Failed to send message to ${telegramUserId}:`, errorData);
      return false;
    }

    return true;
  } catch (error) {
    console.error(`Error sending message to ${telegramUserId}:`, error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
function shouldSendReminder(reminder: UserReminder): boolean {
  if (!reminder.is_enabled) return false;

  const now = new Date();
  const lastSent = reminder.last_sent_at
    ? new Date(reminder.last_sent_at)
    : null;

  // –î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  if (reminder.reminder_time) {
    const [hours, minutes] = reminder.reminder_time.split(":").map(Number);
    const reminderDateTime = new Date();
    reminderDateTime.setHours(hours, minutes, 0, 0);

    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –Ω–µ —Å–µ–≥–æ–¥–Ω—è
    if (now >= reminderDateTime) {
      if (!lastSent || lastSent.toDateString() !== now.toDateString()) {
        return true;
      }
    }
  }

  // –î–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  if (reminder.interval_minutes) {
    if (!lastSent) return true; // –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

    const timeSinceLastSent = now.getTime() - lastSent.getTime();
    const intervalMs = reminder.interval_minutes * 60 * 1000;

    return timeSinceLastSent >= intervalMs;
  }

  return false;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async function processReminders(): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const { data: reminders, error: remindersError } = await supabase
      .from("user_reminders")
      .select("*")
      .eq("is_enabled", true);

    if (remindersError) {
      console.error("Error fetching reminders:", remindersError);
      return;
    }

    if (!reminders || reminders.length === 0) {
      console.log("No active reminders found");
      return;
    }

    console.log(`Found ${reminders.length} active reminders`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    const userIds = [...new Set(reminders.map((r) => r.telegram_user_id))];
    const { data: users, error: usersError } = await supabase
      .from("users")
      .select("telegram_user_id, first_name, last_name, language")
      .in("telegram_user_id", userIds);

    if (usersError) {
      console.error("Error fetching users:", usersError);
      return;
    }

    const usersMap = new Map(users?.map((u) => [u.telegram_user_id, u]) || []);

    let sentCount = 0;
    let failedCount = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    for (const reminder of reminders as UserReminder[]) {
      if (!shouldSendReminder(reminder)) continue;

      const user = usersMap.get(reminder.telegram_user_id);
      if (!user) {
        console.warn(`User not found for reminder ${reminder.id}`);
        continue;
      }

      const message = getRandomMessage(reminder.reminder_type, user.language);
      const success = await sendTelegramMessage(
        reminder.telegram_user_id,
        message,
      );

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      await supabase
        .from("reminder_history")
        .insert({
          telegram_user_id: reminder.telegram_user_id,
          reminder_type: reminder.reminder_type,
          status: success ? "sent" : "failed",
          reminder_id: reminder.id,
          error_message: success ? null : "Failed to send message",
        });

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      if (success) {
        await supabase
          .from("user_reminders")
          .update({ last_sent_at: new Date().toISOString() })
          .eq("id", reminder.id);

        sentCount++;
        console.log(
          `Sent ${reminder.reminder_type} reminder to user ${reminder.telegram_user_id}`,
        );
      } else {
        failedCount++;
        console.error(
          `Failed to send ${reminder.reminder_type} reminder to user ${reminder.telegram_user_id}`,
        );
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
      await new Promise((resolve) => setTimeout(resolve, 100));
    }

    console.log(
      `Reminder processing completed. Sent: ${sentCount}, Failed: ${failedCount}`,
    );
  } catch (error) {
    console.error("Error processing reminders:", error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
Deno.serve(async (req: Request) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
  if (req.method !== "POST") {
    return new Response("Method not allowed", { status: 405 });
  }

  try {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await processReminders();

    return new Response(
      JSON.stringify({
        success: true,
        message: "Reminders processed successfully",
      }),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  } catch (error) {
    console.error("Error in main handler:", error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      }),
      {
        status: 500,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  }
});
