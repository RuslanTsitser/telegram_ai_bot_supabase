import { Context } from "https://deno.land/x/grammy@v1.8.3/mod.ts";
import { SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { SubscriptionPlan } from "../interfaces/Database.ts";
import { formatWithDeclension } from "../utils/declension.ts";

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
export async function handleTrialSubscription(
  ctx: Context,
  plan: SubscriptionPlan,
  supabase: SupabaseClient,
) {
  const userId = ctx.from?.id;
  if (!userId) return;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
  const { data: user, error } = await supabase
    .from("users")
    .select("trial_used")
    .eq("telegram_user_id", userId)
    .single();

  if (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    return;
  }

  if (user.trial_used) {
    await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω");
    return;
  }

  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
  const trialEndDate = new Date();
  trialEndDate.setDate(trialEndDate.getDate() + plan.duration_days);

  const { error: updateError } = await supabase
    .from("users")
    .update({
      trial_used: true,
      premium_expires_at: trialEndDate.toISOString(),
    })
    .eq("telegram_user_id", userId);

  if (updateError) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞");
    return;
  }

  await ctx.answerCallbackQuery("‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!");
  await ctx.editMessageText(
    `üéâ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ "${plan.name}" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n` +
      `–î–æ—Å—Ç—É–ø–µ–Ω –¥–æ: ${trialEndDate.toLocaleDateString("ru-RU")}\n\n` +
      `–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!`,
  );
}

// –°–æ–∑–¥–∞–Ω–∏–µ invoice –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
export async function createSubscriptionInvoice(
  ctx: Context,
  plan: SubscriptionPlan,
  test: boolean,
) {
  const userId = ctx.from?.id;
  if (!userId) return;

  try {
    // –°–æ–∑–¥–∞–µ–º invoice —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    await ctx.api.sendInvoice(
      ctx.chat?.id!,
      `–ü–æ–¥–ø–∏—Å–∫–∞: ${plan.name}`,
      plan.description ||
        `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${
          formatWithDeclension(plan.duration_days, ["–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π"])
        }`,
      `subscription_${plan.id}_${userId}`,
      test
        ? Deno.env.get("YOOKASSA_PROVIDER_TOKEN_TEST") || ""
        : Deno.env.get("YOOKASSA_PROVIDER_TOKEN") || "",
      "RUB",
      [{
        label: plan.name,
        amount: Math.round(plan.price * 100), // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
      }],
    );

    await ctx.answerCallbackQuery("‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã");
  } catch (error) {
    console.error("Error creating invoice:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞");
  }
}
